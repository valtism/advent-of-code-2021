{
  "version": 3,
  "sources": ["../../src/day15/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\nimport _ from \"lodash\";\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\"\\n\").map((line) => line.trim().split(\"\").map(Number));\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  let allCoords = new Map<string, { value: number; shortest: number }>();\n  for (let y = 0; y < input.length; y++) {\n    const row = input[y];\n    for (let x = 0; x < row.length; x++) {\n      const coord = `${x},${y}`;\n      allCoords.set(coord, {\n        value: row[x],\n        shortest: coord === \"0,0\" ? 0 : Infinity,\n      });\n    }\n  }\n\n  for (let y = 0; y < input.length; y++) {\n    const row = input[y];\n    for (let x = 0; x < row.length; x++) {\n      const coord = `${x},${y}`;\n      const neighbors = [\n        `${x},${y - 1}`,\n        `${x - 1},${y}`,\n        // `${x + 1},${y}`,\n        // `${x},${y + 1}`,\n      ];\n      const coordValues = allCoords.get(coord);\n      const shortestNeighborPath = neighbors.reduce((short, neighbor) => {\n        if (!allCoords.has(neighbor)) return short;\n        const neighborShortest = allCoords.get(neighbor).shortest;\n        return Math.min(short, neighborShortest);\n      }, coordValues.shortest);\n      allCoords.set(coord, {\n        ...coordValues,\n        shortest: shortestNeighborPath + coordValues.value,\n      });\n    }\n  }\n\n  return allCoords.get(`${input.length - 1},${input.length - 1}`).shortest - 1;\n};\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  const allCoords = new Map<string, { value: number; shortest: number }>();\n  for (let y = 0; y < input.length; y++) {\n    const row = input[y];\n    for (let x = 0; x < row.length; x++) {\n      for (let i = 0; i < 5; i++) {\n        for (let j = 0; j < 5; j++) {\n          const coord = `${x + i * row.length},${y + j * input.length}`;\n          allCoords.set(coord, {\n            value: coord === \"0,0\" ? 0 : ((row[x] + i + j - 1) % 9) + 1,\n            shortest: coord === \"0,0\" ? 0 : Infinity,\n          });\n        }\n      }\n    }\n  }\n\n  const toUpdate = new Set<string>();\n  toUpdate.add(\"0,0\");\n\n  toUpdate.forEach((coord) => {\n    const coordValues = allCoords.get(coord);\n    const [x, y] = coord.split(\",\").map(Number);\n    const neighbours = [\n      { x: x, y: y - 1 },\n      { x: x - 1, y: y },\n      { x: x + 1, y: y },\n      { x: x, y: y + 1 },\n    ];\n    neighbours.forEach(({ x, y }) => {\n      const neighbourCoord = `${x},${y}`;\n      if (!allCoords.has(neighbourCoord)) return;\n\n      const neighborValues = allCoords.get(neighbourCoord);\n      const newLength = coordValues.shortest + neighborValues.value;\n      if (newLength < neighborValues.shortest) {\n        allCoords.set(neighbourCoord, {\n          ...neighborValues,\n          shortest: newLength,\n        });\n        toUpdate.add(neighbourCoord);\n      }\n    });\n    toUpdate.delete(coord);\n  });\n\n  return allCoords.get(`${input.length * 5 - 1},${input.length * 5 - 1}`)\n    .shortest;\n};\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `1163751742\n      1381373672\n      2136511328\n      3694931569\n      7463417111\n      1319128137\n      1359912421\n      3125421639\n      1293138521\n      2311944581`,\n        expected: 40,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `1163751742\n      1381373672\n      2136511328\n      3694931569\n      7463417111\n      1319128137\n      1359912421\n      3125421639\n      1293138521\n      2311944581`,\n        expected: 315,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "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",
  "names": []
}
