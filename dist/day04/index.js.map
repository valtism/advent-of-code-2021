{
  "version": 3,
  "sources": ["../../src/day04/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\n\nconst parseInput = (rawInput: string) => rawInput.split(\"\\n\\n\");\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n  const toDraw = input[0].split(\",\").map(Number);\n  const boards = input\n    .slice(1)\n    .map((board) =>\n      board.split(\"\\n\").map((line) => line.trim().split(/\\s+/).map(Number)),\n    );\n\n  let drawn: number[] = [];\n  let winningBoard = [];\n  for (const draw of toDraw) {\n    drawn.push(draw);\n    winningBoard = boards.filter((board) => checkBoardForWin(board, drawn));\n    if (winningBoard.length > 0) break;\n  }\n\n  const unmarked = getUnmarked(winningBoard[0], drawn).reduce(\n    (acc, curr) => acc + curr,\n    0,\n  );\n\n  return unmarked * drawn[drawn.length - 1];\n};\n\nfunction checkBoardForWin(board: number[][], drawn: number[]) {\n  const rowWin = board.some((row) => row.every((num) => drawn.includes(num)));\n  if (rowWin) return true;\n\n  for (let x = 0; x < board.length; x++) {\n    let colWin = true;\n    for (let y = 0; y < board.length; y++) {\n      const num = board[y][x];\n      if (!drawn.includes(num)) {\n        colWin = false;\n        break;\n      }\n    }\n    if (colWin === true) return true;\n  }\n}\n\nfunction getUnmarked(board: number[][], drawn: number[]): number[] {\n  const unmarked = [];\n  for (let x = 0; x < board.length; x++) {\n    for (let y = 0; y < board.length; y++) {\n      const num = board[y][x];\n      if (!drawn.includes(num)) {\n        unmarked.push(num);\n      }\n    }\n  }\n  return unmarked;\n}\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n  const toDraw = input[0].split(\",\").map(Number);\n  const boards = input\n    .slice(1)\n    .map((board) =>\n      board.split(\"\\n\").map((line) => line.trim().split(/\\s+/).map(Number)),\n    );\n\n  let drawn: number[] = [];\n  let unWonBoards = [...boards];\n  let lastUnWonBoard: number[][] = null;\n  for (const draw of toDraw) {\n    drawn.push(draw);\n    unWonBoards = boards.filter((board) => !checkBoardForWin(board, drawn));\n    if (unWonBoards.length === 1) {\n      lastUnWonBoard = unWonBoards[0];\n    }\n    if (unWonBoards.length === 0) break;\n  }\n\n  const unmarked = getUnmarked(lastUnWonBoard, drawn).reduce(\n    (acc, curr) => acc + curr,\n    0,\n  );\n\n  return unmarked * drawn[drawn.length - 1];\n};\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1\n\n22 13 17 11  0\n 8  2 23  4 24\n21  9 14 16  7\n 6 10  3 18  5\n 1 12 20 15 19\n\n 3 15  0  2 22\n 9 18 13 17  5\n19  8  7 25 23\n20 11 10 24  4\n14 21 16 12  6\n\n14 21 17 24  4\n10 16 15  9 19\n18  8 23 26 20\n22 11 13  6  5\n 2  0 12  3  7`,\n        expected: 4512,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1\n\n22 13 17 11  0\n 8  2 23  4 24\n21  9 14 16  7\n 6 10  3 18  5\n 1 12 20 15 19\n\n 3 15  0  2 22\n 9 18 13 17  5\n19  8  7 25 23\n20 11 10 24  4\n14 21 16 12  6\n\n14 21 17 24  4\n10 16 15  9 19\n18  8 23 26 20\n22 11 13  6  5\n 2  0 12  3  7`,\n        expected: 1924,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "AAAA;AAEA,MAAM,aAAa,CAAC,aAAqB,SAAS,MAAM;AAExD,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,QAAM,SAAS,MAAM,GAAG,MAAM,KAAK,IAAI;AACvC,QAAM,SAAS,MACZ,MAAM,GACN,IAAI,CAAC,UACJ,MAAM,MAAM,MAAM,IAAI,CAAC,SAAS,KAAK,OAAO,MAAM,OAAO,IAAI;AAGjE,MAAI,QAAkB;AACtB,MAAI,eAAe;AACnB,aAAW,QAAQ,QAAQ;AACzB,UAAM,KAAK;AACX,mBAAe,OAAO,OAAO,CAAC,UAAU,iBAAiB,OAAO;AAChE,QAAI,aAAa,SAAS;AAAG;AAAA;AAG/B,QAAM,WAAW,YAAY,aAAa,IAAI,OAAO,OACnD,CAAC,KAAK,SAAS,MAAM,MACrB;AAGF,SAAO,WAAW,MAAM,MAAM,SAAS;AAAA;AAGzC,0BAA0B,OAAmB,OAAiB;AAC5D,QAAM,SAAS,MAAM,KAAK,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,MAAM,SAAS;AACrE,MAAI;AAAQ,WAAO;AAEnB,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,QAAI,SAAS;AACb,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAM,MAAM,MAAM,GAAG;AACrB,UAAI,CAAC,MAAM,SAAS,MAAM;AACxB,iBAAS;AACT;AAAA;AAAA;AAGJ,QAAI,WAAW;AAAM,aAAO;AAAA;AAAA;AAIhC,qBAAqB,OAAmB,OAA2B;AACjE,QAAM,WAAW;AACjB,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAM,MAAM,MAAM,GAAG;AACrB,UAAI,CAAC,MAAM,SAAS,MAAM;AACxB,iBAAS,KAAK;AAAA;AAAA;AAAA;AAIpB,SAAO;AAAA;AAGT,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,QAAM,SAAS,MAAM,GAAG,MAAM,KAAK,IAAI;AACvC,QAAM,SAAS,MACZ,MAAM,GACN,IAAI,CAAC,UACJ,MAAM,MAAM,MAAM,IAAI,CAAC,SAAS,KAAK,OAAO,MAAM,OAAO,IAAI;AAGjE,MAAI,QAAkB;AACtB,MAAI,cAAc,CAAC,GAAG;AACtB,MAAI,iBAA6B;AACjC,aAAW,QAAQ,QAAQ;AACzB,UAAM,KAAK;AACX,kBAAc,OAAO,OAAO,CAAC,UAAU,CAAC,iBAAiB,OAAO;AAChE,QAAI,YAAY,WAAW,GAAG;AAC5B,uBAAiB,YAAY;AAAA;AAE/B,QAAI,YAAY,WAAW;AAAG;AAAA;AAGhC,QAAM,WAAW,YAAY,gBAAgB,OAAO,OAClD,CAAC,KAAK,SAAS,MAAM,MACrB;AAGF,SAAO,WAAW,MAAM,MAAM,SAAS;AAAA;AAGzC,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAmBP,UAAU;AAAA;AAAA;AAAA,IAGd,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAmBP,UAAU;AAAA;AAAA;AAAA,IAGd,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
