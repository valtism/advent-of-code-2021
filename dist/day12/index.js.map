{
  "version": 3,
  "sources": ["../../src/day12/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\nimport _ from \"lodash\";\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\"\\n\").flatMap((line) => {\n    const [start, end] = line.trim().split(\"-\");\n    const [start2, end2] = line.trim().split(\"-\").reverse();\n    return [\n      { start, end },\n      { start: start2, end: end2 },\n    ];\n  });\n\nconst isUpperCase = (string: string) => /^[A-Z]*$/.test(string);\n\nconst part1 = (rawInput: string) => {\n  const connections = parseInput(rawInput);\n\n  const paths: string[][] = [];\n  function recurse(visited: string[], cave: string) {\n    if (cave === \"end\") {\n      paths.push([...visited, \"end\"]);\n      return;\n    }\n    if (\n      (visited.length > 0 && cave === \"start\") ||\n      (!isUpperCase(cave) && visited.includes(cave))\n    ) {\n      return;\n    } else {\n      connections\n        .filter((line) => line.start === cave)\n        .forEach((connection) => {\n          recurse([...visited, cave], connection.end);\n        });\n    }\n  }\n  recurse([], \"start\");\n\n  return paths.length;\n};\n\nconst part2 = (rawInput: string) => {\n  const connections = parseInput(rawInput);\n\n  const paths: string[][] = [];\n  function recurse(visited: string[], cave: string, hasVisitedTwice: boolean) {\n    if (cave === \"end\") {\n      paths.push([...visited, \"end\"]);\n      return;\n    }\n    const secondVisit = !isUpperCase(cave) && visited.includes(cave);\n    if (\n      (visited.length > 0 && cave === \"start\") ||\n      (hasVisitedTwice && secondVisit)\n    ) {\n      return;\n    } else {\n      connections\n        .filter((line) => line.start === cave)\n        .forEach((connection) => {\n          recurse(\n            [...visited, cave],\n            connection.end,\n            hasVisitedTwice || secondVisit,\n          );\n        });\n    }\n  }\n  recurse([], \"start\", false);\n\n  return paths.length;\n};\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `start-A\n      start-b\n      A-c\n      A-b\n      b-d\n      A-end\n      b-end`,\n        expected: 10,\n      },\n      {\n        input: `dc-end\n        HN-start\n        start-kj\n        dc-start\n        dc-HN\n        LN-dc\n        HN-end\n        kj-sa\n        kj-HN\n        kj-dc`,\n        expected: 19,\n      },\n      {\n        input: `fs-end\n        he-DX\n        fs-he\n        start-DX\n        pj-DX\n        end-zg\n        zg-sl\n        zg-pj\n        pj-he\n        RW-he\n        fs-DX\n        pj-RW\n        zg-RW\n        start-pj\n        he-WI\n        zg-he\n        pj-fs\n        start-RW`,\n        expected: 226,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `start-A\n      start-b\n      A-c\n      A-b\n      b-d\n      A-end\n      b-end`,\n        expected: 36,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "AAAA;AAGA,MAAM,aAAa,CAAC,aAClB,SAAS,MAAM,MAAM,QAAQ,CAAC,SAAS;AACrC,QAAM,CAAC,OAAO,OAAO,KAAK,OAAO,MAAM;AACvC,QAAM,CAAC,QAAQ,QAAQ,KAAK,OAAO,MAAM,KAAK;AAC9C,SAAO;AAAA,IACL,EAAE,OAAO;AAAA,IACT,EAAE,OAAO,QAAQ,KAAK;AAAA;AAAA;AAI5B,MAAM,cAAc,CAAC,WAAmB,WAAW,KAAK;AAExD,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,cAAc,WAAW;AAE/B,QAAM,QAAoB;AAC1B,mBAAiB,SAAmB,MAAc;AAChD,QAAI,SAAS,OAAO;AAClB,YAAM,KAAK,CAAC,GAAG,SAAS;AACxB;AAAA;AAEF,QACG,QAAQ,SAAS,KAAK,SAAS,WAC/B,CAAC,YAAY,SAAS,QAAQ,SAAS,OACxC;AACA;AAAA,WACK;AACL,kBACG,OAAO,CAAC,SAAS,KAAK,UAAU,MAChC,QAAQ,CAAC,eAAe;AACvB,gBAAQ,CAAC,GAAG,SAAS,OAAO,WAAW;AAAA;AAAA;AAAA;AAI/C,UAAQ,IAAI;AAEZ,SAAO,MAAM;AAAA;AAGf,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,cAAc,WAAW;AAE/B,QAAM,QAAoB;AAC1B,mBAAiB,SAAmB,MAAc,iBAA0B;AAC1E,QAAI,SAAS,OAAO;AAClB,YAAM,KAAK,CAAC,GAAG,SAAS;AACxB;AAAA;AAEF,UAAM,cAAc,CAAC,YAAY,SAAS,QAAQ,SAAS;AAC3D,QACG,QAAQ,SAAS,KAAK,SAAS,WAC/B,mBAAmB,aACpB;AACA;AAAA,WACK;AACL,kBACG,OAAO,CAAC,SAAS,KAAK,UAAU,MAChC,QAAQ,CAAC,eAAe;AACvB,gBACE,CAAC,GAAG,SAAS,OACb,WAAW,KACX,mBAAmB;AAAA;AAAA;AAAA;AAK7B,UAAQ,IAAI,SAAS;AAErB,SAAO,MAAM;AAAA;AAGf,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOP,UAAU;AAAA;AAAA,MAEZ;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUP,UAAU;AAAA;AAAA,MAEZ;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAkBP,UAAU;AAAA;AAAA;AAAA,IAGd,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOP,UAAU;AAAA;AAAA;AAAA,IAGd,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
