{
  "version": 3,
  "sources": ["../../src/day03/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\"\\n\").map((line) => line.trim());\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n  const common = getCounts(input);\n\n  const gammastring = common.reduce((acc, curr) => {\n    const zeros = curr[\"0\"];\n    const ones = curr[\"1\"];\n    return zeros > ones ? (acc += \"0\") : (acc += \"1\");\n  }, \"\");\n\n  const gamma = parseInt(gammastring, 2);\n\n  const epsilonstring = common.reduce((acc, curr) => {\n    const zeros = curr[\"0\"];\n    const ones = curr[\"1\"];\n    return zeros > ones ? (acc += \"1\") : (acc += \"0\");\n  }, \"\");\n\n  const epsilon = parseInt(epsilonstring, 2);\n\n  return gamma * epsilon;\n};\n\nfunction getCounts(list: string[]) {\n  const stringLength = list[0].length;\n  const counts = Array(stringLength)\n    .fill(null)\n    .map(() => ({ \"0\": 0, \"1\": 0 }));\n  list.forEach((line) => {\n    for (let i = 0; i < stringLength; i++) {\n      const char = line[i];\n      counts[i][char]++;\n    }\n  });\n  return counts;\n}\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  const oxygenRating = getRating(input, (ones, zeros) =>\n    ones >= zeros ? \"1\" : \"0\",\n  );\n\n  const co2Rating = getRating(input, (ones, zeros) =>\n    ones < zeros ? \"1\" : \"0\",\n  );\n\n  return oxygenRating * co2Rating;\n};\n\nfunction getRating(\n  input: string[],\n  comparison: (ones: number, zeros: number) => string,\n) {\n  let mutableList = input;\n  for (let i = 0; i < input[0].length; i++) {\n    const mostOccuring = getOccurance(mutableList, comparison);\n    mutableList = mutableList.filter((line) => line[i] === mostOccuring[i]);\n    if (mutableList.length === 1) break;\n  }\n\n  return parseInt(mutableList[0], 2);\n}\n\nfunction getOccurance(\n  list: string[],\n  comparison: (ones: number, zeros: number) => string,\n) {\n  const occurances = getCounts(list);\n\n  return occurances.map((occurance) => {\n    const zeros = occurance[\"0\"];\n    const ones = occurance[\"1\"];\n    return comparison(ones, zeros);\n  });\n}\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `00100\n        11110\n        10110\n        10111\n        10101\n        01111\n        00111\n        11100\n        10000\n        11001\n        00010\n        01010`,\n        expected: 198,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `00100\n        11110\n        10110\n        10111\n        10101\n        01111\n        00111\n        11100\n        10000\n        11001\n        00010\n        01010`,\n        expected: 230,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "AAAA;AAEA,MAAM,aAAa,CAAC,aAClB,SAAS,MAAM,MAAM,IAAI,CAAC,SAAS,KAAK;AAE1C,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,QAAM,SAAS,UAAU;AAEzB,QAAM,cAAc,OAAO,OAAO,CAAC,KAAK,SAAS;AAC/C,UAAM,QAAQ,KAAK;AACnB,UAAM,OAAO,KAAK;AAClB,WAAO,QAAQ,OAAQ,OAAO,MAAQ,OAAO;AAAA,KAC5C;AAEH,QAAM,QAAQ,SAAS,aAAa;AAEpC,QAAM,gBAAgB,OAAO,OAAO,CAAC,KAAK,SAAS;AACjD,UAAM,QAAQ,KAAK;AACnB,UAAM,OAAO,KAAK;AAClB,WAAO,QAAQ,OAAQ,OAAO,MAAQ,OAAO;AAAA,KAC5C;AAEH,QAAM,UAAU,SAAS,eAAe;AAExC,SAAO,QAAQ;AAAA;AAGjB,mBAAmB,MAAgB;AACjC,QAAM,eAAe,KAAK,GAAG;AAC7B,QAAM,SAAS,MAAM,cAClB,KAAK,MACL,IAAI,MAAO,GAAE,KAAK,GAAG,KAAK;AAC7B,OAAK,QAAQ,CAAC,SAAS;AACrB,aAAS,IAAI,GAAG,IAAI,cAAc,KAAK;AACrC,YAAM,OAAO,KAAK;AAClB,aAAO,GAAG;AAAA;AAAA;AAGd,SAAO;AAAA;AAGT,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AAEzB,QAAM,eAAe,UAAU,OAAO,CAAC,MAAM,UAC3C,QAAQ,QAAQ,MAAM;AAGxB,QAAM,YAAY,UAAU,OAAO,CAAC,MAAM,UACxC,OAAO,QAAQ,MAAM;AAGvB,SAAO,eAAe;AAAA;AAGxB,mBACE,OACA,YACA;AACA,MAAI,cAAc;AAClB,WAAS,IAAI,GAAG,IAAI,MAAM,GAAG,QAAQ,KAAK;AACxC,UAAM,eAAe,aAAa,aAAa;AAC/C,kBAAc,YAAY,OAAO,CAAC,SAAS,KAAK,OAAO,aAAa;AACpE,QAAI,YAAY,WAAW;AAAG;AAAA;AAGhC,SAAO,SAAS,YAAY,IAAI;AAAA;AAGlC,sBACE,MACA,YACA;AACA,QAAM,aAAa,UAAU;AAE7B,SAAO,WAAW,IAAI,CAAC,cAAc;AACnC,UAAM,QAAQ,UAAU;AACxB,UAAM,OAAO,UAAU;AACvB,WAAO,WAAW,MAAM;AAAA;AAAA;AAI5B,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAYP,UAAU;AAAA;AAAA;AAAA,IAGd,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAYP,UAAU;AAAA;AAAA;AAAA,IAGd,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
