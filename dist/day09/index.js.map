{
  "version": 3,
  "sources": ["../../src/day09/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\nimport _ from \"lodash\";\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\"\\n\").map((row) => row.trim().split(\"\").map(Number));\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n  const lows = [];\n  for (let y = 0; y < input.length; y++) {\n    const row = input[y];\n    for (let x = 0; x < row.length; x++) {\n      const current = row[x];\n      const neighbors = [\n        row[x - 1],\n        row[x + 1],\n        input[y - 1]?.[x],\n        input[y + 1]?.[x],\n      ].filter((n) => n !== undefined);\n\n      if (neighbors.every((n) => n > current)) {\n        lows.push(current);\n      }\n    }\n  }\n  return lows.map((low) => low + 1).reduce((acc, curr) => acc + curr, 0);\n};\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n  const map = new Map<string, number>();\n  let basinNumber = 0;\n\n  function walkBasin(x: number, y: number) {\n    const neighbors = [\n      [x - 1, y],\n      [x + 1, y],\n      [x, y - 1],\n      [x, y + 1],\n    ];\n\n    neighbors.forEach(([x, y]) => {\n      const coords = `${x},${y}`;\n      const value = input[y]?.[x];\n      if (value !== undefined && value !== 9 && !map.has(coords)) {\n        map.set(coords, basinNumber);\n        walkBasin(x, y);\n      }\n    });\n  }\n\n  for (let y = 0; y < input.length; y++) {\n    const row = input[y];\n    for (let x = 0; x < row.length; x++) {\n      const coords = `${x},${y}`;\n      const current = row[x];\n      if (map.has(coords) || current === 9) {\n        continue;\n      }\n\n      walkBasin(x, y);\n      basinNumber++;\n    }\n  }\n\n  let basinSizes = Array(basinNumber).fill(0);\n  for (const basinNumber of map.values()) {\n    basinSizes[basinNumber]++;\n  }\n\n  const sizes = basinSizes.sort((a, b) => b - a);\n\n  return sizes[0] * sizes[1] * sizes[2];\n};\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `2199943210\n        3987894921\n        9856789892\n        8767896789\n        9899965678`,\n        expected: 15,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `2199943210\n      3987894921\n      9856789892\n      8767896789\n      9899965678`,\n        expected: 1134,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "AAAA;AAGA,MAAM,aAAa,CAAC,aAClB,SAAS,MAAM,MAAM,IAAI,CAAC,QAAQ,IAAI,OAAO,MAAM,IAAI,IAAI;AAE7D,MAAM,QAAQ,CAAC,aAAqB;AANpC;AAOE,QAAM,QAAQ,WAAW;AACzB,QAAM,OAAO;AACb,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAM,MAAM,MAAM;AAClB,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,YAAM,UAAU,IAAI;AACpB,YAAM,YAAY;AAAA,QAChB,IAAI,IAAI;AAAA,QACR,IAAI,IAAI;AAAA,QACR,YAAM,IAAI,OAAV,mBAAe;AAAA,QACf,YAAM,IAAI,OAAV,mBAAe;AAAA,QACf,OAAO,CAAC,MAAM,MAAM;AAEtB,UAAI,UAAU,MAAM,CAAC,MAAM,IAAI,UAAU;AACvC,aAAK,KAAK;AAAA;AAAA;AAAA;AAIhB,SAAO,KAAK,IAAI,CAAC,QAAQ,MAAM,GAAG,OAAO,CAAC,KAAK,SAAS,MAAM,MAAM;AAAA;AAGtE,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AACzB,QAAM,MAAM,IAAI;AAChB,MAAI,cAAc;AAElB,qBAAmB,GAAW,GAAW;AACvC,UAAM,YAAY;AAAA,MAChB,CAAC,IAAI,GAAG;AAAA,MACR,CAAC,IAAI,GAAG;AAAA,MACR,CAAC,GAAG,IAAI;AAAA,MACR,CAAC,GAAG,IAAI;AAAA;AAGV,cAAU,QAAQ,CAAC,CAAC,IAAG,QAAO;AAzClC;AA0CM,YAAM,SAAS,GAAG,MAAK;AACvB,YAAM,QAAQ,YAAM,QAAN,mBAAW;AACzB,UAAI,UAAU,UAAa,UAAU,KAAK,CAAC,IAAI,IAAI,SAAS;AAC1D,YAAI,IAAI,QAAQ;AAChB,kBAAU,IAAG;AAAA;AAAA;AAAA;AAKnB,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAM,MAAM,MAAM;AAClB,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,YAAM,SAAS,GAAG,KAAK;AACvB,YAAM,UAAU,IAAI;AACpB,UAAI,IAAI,IAAI,WAAW,YAAY,GAAG;AACpC;AAAA;AAGF,gBAAU,GAAG;AACb;AAAA;AAAA;AAIJ,MAAI,aAAa,MAAM,aAAa,KAAK;AACzC,aAAW,gBAAe,IAAI,UAAU;AACtC,eAAW;AAAA;AAGb,QAAM,QAAQ,WAAW,KAAK,CAAC,GAAG,MAAM,IAAI;AAE5C,SAAO,MAAM,KAAK,MAAM,KAAK,MAAM;AAAA;AAGrC,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,QAKP,UAAU;AAAA;AAAA;AAAA,IAGd,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,QAKP,UAAU;AAAA;AAAA;AAAA,IAGd,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
