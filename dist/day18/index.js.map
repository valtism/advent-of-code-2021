{
  "version": 3,
  "sources": ["../../src/day18/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\nimport _ from \"lodash\";\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\"\\n\").map((line) => eval(line));\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  input[0] = reduce(input[0]);\n  const res = input.reduce((acc, curr) => {\n    return reduce([acc, curr]);\n  });\n\n  function magnitude(pair) {\n    if (typeof pair === \"number\") {\n      return pair;\n    }\n    return magnitude(pair[0]) * 3 + magnitude(pair[1]) * 2;\n  }\n\n  return magnitude(res);\n};\n\nfunction reduce(snailNumber) {\n  // console.log(\"start:\", JSON.stringify(snailNumber));\n  let runType = \"Explode\";\n  let noSplit = false;\n  while (!(runType === \"Split\" && noSplit === true)) {\n    let depth = 0;\n    function recurse(pair) {\n      // Exit early\n      if (noSplit === false) return pair;\n\n      depth++;\n\n      if (depth === 5) {\n        const leftRef = getToLeft(snailNumber, pair);\n        const rightRef = getToRight(snailNumber, pair);\n        // console.log(JSON.stringify(snailNumber));\n        // console.log(\"explode\", `${pair[0]},`, pair[1]);\n        if (leftRef) {\n          leftRef.pair[leftRef.index] += pair[0];\n        }\n        if (rightRef) {\n          rightRef.pair[rightRef.index] += pair[1];\n        }\n        depth--;\n        return 0;\n      }\n\n      if (Array.isArray(pair[0])) {\n        const res = recurse(pair[0]);\n        pair[0] = res;\n        if (noSplit === false) {\n          return pair;\n        }\n      }\n      if (typeof pair[0] === \"number\" && pair[0] > 9 && runType === \"Split\") {\n        noSplit = false;\n        depth--;\n        // console.log(JSON.stringify(snailNumber));\n        // console.log(\"split\", pair[0]);\n        pair[0] = [Math.floor(pair[0] / 2), Math.ceil(pair[0] / 2)];\n        return pair;\n      }\n\n      if (Array.isArray(pair[1])) {\n        const res = recurse(pair[1]);\n        pair[1] = res;\n        if (noSplit === false) {\n          return pair;\n        }\n      }\n      if (typeof pair[1] === \"number\" && pair[1] > 9 && runType === \"Split\") {\n        noSplit = false;\n        depth--;\n        // console.log(JSON.stringify(snailNumber));\n        // console.log(\"split\", pair[1]);\n        pair[1] = [Math.floor(pair[1] / 2), Math.ceil(pair[1] / 2)];\n        return pair;\n      }\n\n      depth--;\n      return pair;\n    }\n\n    noSplit = true;\n    recurse(snailNumber);\n    if (runType === \"Explode\") {\n      runType = \"Split\";\n      noSplit = false;\n    } else if (runType === \"Split\") {\n      if (noSplit === false) {\n        runType = \"Explode\";\n      }\n    }\n  }\n  // console.log(JSON.stringify(snailNumber));\n  return snailNumber;\n}\n\nfunction getToLeft(input, ref) {\n  let toLeft: { pair: any[]; index: number } | null = null;\n  let found = false;\n  function recurse(pair) {\n    if (pair === ref) {\n      found = true;\n      return;\n    }\n    if (typeof pair[0] === \"number\") {\n      if (!found) {\n        toLeft = { pair, index: 0 };\n      }\n    } else {\n      recurse(pair[0]);\n    }\n\n    if (typeof pair[1] === \"number\") {\n      if (!found) {\n        toLeft = { pair, index: 1 };\n      }\n    } else {\n      recurse(pair[1]);\n    }\n  }\n  recurse(input);\n  return toLeft;\n}\n\nfunction getToRight(input, ref) {\n  let toRight: { pair: any[]; index: number } | null = null;\n  let passedRef = false;\n  function recurse(pair) {\n    if (typeof pair[0] === \"number\") {\n      if (passedRef) {\n        if (toRight === null) {\n          toRight = { pair, index: 0 };\n        }\n        return;\n      }\n    } else {\n      recurse(pair[0]);\n    }\n\n    if (typeof pair[1] === \"number\") {\n      if (passedRef) {\n        if (toRight === null) {\n          toRight = { pair, index: 1 };\n        }\n        return;\n      }\n    } else {\n      recurse(pair[1]);\n    }\n\n    if (pair === ref) {\n      passedRef = true;\n    }\n  }\n  recurse(input);\n  return toRight;\n}\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  let pairs = [];\n\n  for (let i = 0; i < input.length; i++) {\n    for (let j = 0; j < input.length; j++) {\n      if (i === j) {\n        continue;\n      }\n      pairs.push(reduce([_.cloneDeep(input[i]), _.cloneDeep(input[j])]));\n    }\n  }\n\n  function magnitude(pair) {\n    if (typeof pair === \"number\") {\n      return pair;\n    }\n    return magnitude(pair[0]) * 3 + magnitude(pair[1]) * 2;\n  }\n\n  return pairs.map(magnitude).sort((a, b) => b - a)[0];\n};\n\nrun({\n  part1: {\n    tests: [\n      { input: `[[1,2],[[3,4],5]]`, expected: 143 },\n      { input: `[[[[0,7],4],[[7,8],[6,0]]],[8,1]]`, expected: 1384 },\n      { input: `[[[[1,1],[2,2]],[3,3]],[4,4]]`, expected: 445 },\n      { input: `[[[[3,0],[5,3]],[4,4]],[5,5]]`, expected: 791 },\n      { input: `[[[[5,0],[7,4]],[5,5]],[6,6]]`, expected: 1137 },\n      {\n        input: `[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]`,\n        expected: 3488,\n      },\n      {\n        input: `[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]\n        [[[5,[2,8]],4],[5,[[9,9],0]]]\n        [6,[[[6,2],[5,6]],[[7,6],[4,7]]]]\n        [[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]\n        [[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]\n        [[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]\n        [[[[5,4],[7,7]],8],[[8,3],8]]\n        [[9,3],[[9,9],[6,[4,9]]]]\n        [[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]\n        [[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]`,\n        expected: 4140,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]\n      [[[5,[2,8]],4],[5,[[9,9],0]]]\n      [6,[[[6,2],[5,6]],[[7,6],[4,7]]]]\n      [[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]\n      [[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]\n      [[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]\n      [[[[5,4],[7,7]],8],[[8,3],8]]\n      [[9,3],[[9,9],[6,[4,9]]]]\n      [[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]\n      [[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]`,\n        expected: 3993,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "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",
  "names": []
}
