{
  "version": 3,
  "sources": ["../../src/day14/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\nimport _ from \"lodash\";\n\nconst parseInput = (rawInput: string) => {\n  const [start, rawInstructions] = rawInput.split(\"\\n\\n\");\n  const instructions = new Map();\n  rawInstructions.split(\"\\n\").forEach((line) => {\n    const [pair, insert] = line.trim().split(\" -> \");\n    instructions.set(pair, insert);\n  });\n  return { start, instructions };\n};\n\nconst part1 = (rawInput: string) => {\n  const { start, instructions } = parseInput(rawInput);\n\n  let polymerTemplate = start;\n  for (let loop = 0; loop < 10; loop++) {\n    for (let i = 0; i < polymerTemplate.length - 1; i++) {\n      const section = polymerTemplate.slice(i, i + 2);\n      const instruction = instructions.get(section);\n      polymerTemplate =\n        polymerTemplate.slice(0, i + 1) +\n        instruction +\n        polymerTemplate.slice(i + 1);\n      i++;\n    }\n  }\n  const groups = _.groupBy(polymerTemplate, (c) => c);\n  let min = Infinity;\n  let max = -Infinity;\n  for (const letterArray of Object.values(groups)) {\n    if (letterArray.length > max) {\n      max = letterArray.length;\n    } else if (letterArray.length < min) {\n      min = letterArray.length;\n    }\n  }\n  return max - min;\n};\n\nconst part2 = (rawInput: string) => {\n  const { start, instructions } = parseInput(rawInput);\n\n  // We have a toCommit as well as a committed so we can apply all\n  // changes at once at the end of the loop, rather than as we go.\n  const counts = new Map<string, { toCommit: number; committed: number }>();\n  for (const key of instructions.keys()) {\n    counts.set(key, { toCommit: 0, committed: 0 });\n  }\n\n  for (let i = 0; i < start.length - 1; i++) {\n    const section = start.slice(i, i + 2);\n    const { committed } = counts.get(section);\n    counts.set(section, { toCommit: 0, committed: committed + 1 });\n  }\n\n  for (let loop = 0; loop < 40; loop++) {\n    counts.forEach((value, key) => {\n      const insert = instructions.get(key);\n      const [left, right] = key.split(\"\");\n      const leftSubstr = `${left}${insert}`;\n      const rightSubstr = `${insert}${right}`;\n      const leftCount = counts.get(leftSubstr);\n      const rightCount = counts.get(rightSubstr);\n      counts.set(leftSubstr, {\n        ...leftCount,\n        toCommit: leftCount.toCommit + value.committed,\n      });\n      counts.set(rightSubstr, {\n        ...rightCount,\n        toCommit: rightCount.toCommit + value.committed,\n      });\n    });\n    counts.forEach((value, key) => {\n      counts.set(key, { toCommit: 0, committed: value.toCommit });\n    });\n  }\n\n  const letterCounts = {};\n  counts.forEach((value, key) => {\n    const [left, right] = key.split(\"\");\n    letterCounts[left] = (letterCounts[left] || 0) + value.committed / 2;\n    letterCounts[right] = (letterCounts[right] || 0) + value.committed / 2;\n  });\n  // Add one on the ends, which will still be the bookmark letters from the original input.\n  letterCounts[start[0]] = letterCounts[start[0]] || 0 + 1;\n  letterCounts[start[start.length - 1]] =\n    letterCounts[start[start.length - 1]] || 0 + 1;\n\n  let min = Infinity;\n  let max = -Infinity;\n  for (const value of Object.values(letterCounts)) {\n    if (value > max) {\n      max = Number(value);\n    }\n    if (value < min) {\n      min = Number(value);\n    }\n  }\n\n  return Math.round(max) - Math.round(min);\n};\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `NNCB\n\n      CH -> B\n      HH -> N\n      CB -> H\n      NH -> C\n      HB -> C\n      HC -> B\n      HN -> C\n      NN -> C\n      BH -> H\n      NC -> B\n      NB -> B\n      BN -> B\n      BB -> N\n      BC -> B\n      CC -> N\n      CN -> C`,\n        expected: 1588,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `NNCB\n\n      CH -> B\n      HH -> N\n      CB -> H\n      NH -> C\n      HB -> C\n      HC -> B\n      HN -> C\n      NN -> C\n      BH -> H\n      NC -> B\n      NB -> B\n      BN -> B\n      BB -> N\n      BC -> B\n      CC -> N\n      CN -> C`,\n        expected: 2188189693529,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "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",
  "names": []
}
