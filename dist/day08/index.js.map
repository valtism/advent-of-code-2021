{
  "version": 3,
  "sources": ["../../src/day08/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\nimport _ from \"lodash\";\nimport { isDeepStrictEqual } from \"util\";\nimport { permutator } from \"../utils/index.js\";\n\nconst parseInput = (rawInput: string) =>\n  rawInput\n    .split(\"\\n\")\n    .map((row) => row.split(\" | \").map((row) => row.split(\" \")));\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  let count = 0;\n  for (const row of input) {\n    count += row[1].filter((row) => [2, 3, 4, 7].includes(row.length)).length;\n  }\n  return count;\n};\n\nconst segmentArrangements: string[][] = permutator([\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n]);\n\nconst numberPositions = [\n  [0, 1, 2, 4, 5, 6],\n  [2, 5],\n  [0, 2, 3, 4, 6],\n  [0, 2, 3, 5, 6],\n  [1, 2, 3, 5],\n  [0, 1, 3, 5, 6],\n  [0, 1, 3, 4, 5, 6],\n  [0, 2, 5],\n  [0, 1, 2, 3, 4, 5, 6],\n  [0, 1, 2, 3, 5, 6],\n];\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  let sum = 0;\n  for (const [inputPatterns, outputPatterns] of input) {\n    // We sort the patterns to make comparison easier\n    const sortedInputPatterns = inputPatterns.map((r) =>\n      r.split(\"\").sort().join(\"\"),\n    );\n\n    // Check each permutation until a valid match is found\n    const validArrangement = segmentArrangements.find((arrangement) => {\n      // Map each \"number\" (made of segments) to the transform of the arrangement\n      const signalPatterns = numberPositions.map((numberSegments) =>\n        numberSegments\n          .map((segment) => arrangement[segment])\n          .sort()\n          .join(\"\"),\n      );\n      // If the transform matches our input, we have a valid match\n      return isDeepStrictEqual(\n        sortedInputPatterns.sort(),\n        signalPatterns.sort(),\n      );\n    });\n\n    // Convert output pattern to numbers\n    const outputNumbers = outputPatterns.map((pattern) =>\n      patternToNumber(pattern, validArrangement),\n    );\n\n    // Join output numbers into a single number\n    const decodedOutput = Number(outputNumbers.join(\"\"));\n\n    sum += decodedOutput;\n  }\n\n  return sum;\n};\n\nfunction patternToNumber(pattern: string, arrangment: string[]): number {\n  const indexes = pattern.split(\"\").map((c) => arrangment.indexOf(c));\n  const orderedIndexes = indexes.sort((a, b) => a - b);\n\n  return numberPositions.findIndex((value) =>\n    isDeepStrictEqual(value, orderedIndexes),\n  );\n}\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb | fdgacbe cefdb cefbgd gcbe\nedbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec | fcgedb cgb dgebacf gc\nfgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef | cg cg fdcagb cbg\nfbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega | efabcd cedba gadfec cb\naecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga | gecf egdcabf bgf bfgea\nfgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf | gebdcfa ecba ca fadegcb\ndbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf | cefg dcbef fcge gbcadfe\nbdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd | ed bcgafe cdgba cbgef\negadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg | gbdfcae bgc cg cgb\ngcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc | fgae cfgab fg bagce`,\n        expected: 26,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `acedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab | cdfeb fcadb cdfeb cdbaf`,\n        expected: 5353,\n      },\n      {\n        input: `be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb | fdgacbe cefdb cefbgd gcbe\nedbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec | fcgedb cgb dgebacf gc\nfgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef | cg cg fdcagb cbg\nfbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega | efabcd cedba gadfec cb\naecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga | gecf egdcabf bgf bfgea\nfgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf | gebdcfa ecba ca fadegcb\ndbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf | cefg dcbef fcge gbcadfe\nbdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd | ed bcgafe cdgba cbgef\negadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg | gbdfcae bgc cg cgb\ngcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc | fgae cfgab fg bagce`,\n        expected: 61229,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "AAAA;AAEA;AACA;AAEA,MAAM,aAAa,CAAC,aAClB,SACG,MAAM,MACN,IAAI,CAAC,QAAQ,IAAI,MAAM,OAAO,IAAI,CAAC,SAAQ,KAAI,MAAM;AAE1D,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AAEzB,MAAI,QAAQ;AACZ,aAAW,OAAO,OAAO;AACvB,aAAS,IAAI,GAAG,OAAO,CAAC,SAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,KAAI,SAAS;AAAA;AAErE,SAAO;AAAA;AAGT,MAAM,sBAAkC,WAAW;AAAA,EACjD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAGF,MAAM,kBAAkB;AAAA,EACtB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA,EAChB,CAAC,GAAG;AAAA,EACJ,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA,EACb,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA,EACb,CAAC,GAAG,GAAG,GAAG;AAAA,EACV,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA,EACb,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA,EAChB,CAAC,GAAG,GAAG;AAAA,EACP,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA,EACnB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA;AAGlB,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AAEzB,MAAI,MAAM;AACV,aAAW,CAAC,eAAe,mBAAmB,OAAO;AAEnD,UAAM,sBAAsB,cAAc,IAAI,CAAC,MAC7C,EAAE,MAAM,IAAI,OAAO,KAAK;AAI1B,UAAM,mBAAmB,oBAAoB,KAAK,CAAC,gBAAgB;AAEjE,YAAM,iBAAiB,gBAAgB,IAAI,CAAC,mBAC1C,eACG,IAAI,CAAC,YAAY,YAAY,UAC7B,OACA,KAAK;AAGV,aAAO,kBACL,oBAAoB,QACpB,eAAe;AAAA;AAKnB,UAAM,gBAAgB,eAAe,IAAI,CAAC,YACxC,gBAAgB,SAAS;AAI3B,UAAM,gBAAgB,OAAO,cAAc,KAAK;AAEhD,WAAO;AAAA;AAGT,SAAO;AAAA;AAGT,yBAAyB,SAAiB,YAA8B;AACtE,QAAM,UAAU,QAAQ,MAAM,IAAI,IAAI,CAAC,MAAM,WAAW,QAAQ;AAChE,QAAM,iBAAiB,QAAQ,KAAK,CAAC,GAAG,MAAM,IAAI;AAElD,SAAO,gBAAgB,UAAU,CAAC,UAChC,kBAAkB,OAAO;AAAA;AAI7B,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUP,UAAU;AAAA;AAAA;AAAA,IAGd,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA,QACP,UAAU;AAAA;AAAA,MAEZ;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUP,UAAU;AAAA;AAAA;AAAA,IAGd,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
