{
  "version": 3,
  "sources": ["../../src/day08/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\nimport _ from \"lodash\";\n\nconst parseInput = (rawInput: string) =>\n  rawInput\n    .split(\"\\n\")\n    .map((row) => row.split(\" | \").map((row) => row.split(\" \")));\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  let count = 0;\n  for (const row of input) {\n    count += row[1].filter((row) => [2, 3, 4, 7].includes(row.length)).length;\n  }\n  return count;\n};\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  let sum = 0;\n  for (const row of input) {\n    const leftSorted = row[0].map((r) => r.split(\"\").sort().join(\"\")).sort();\n\n    const match = permutations.find((permutation) => {\n      const codes = positionsNumbers\n        .map((nums) =>\n          nums\n            .map((num) => permutation[num])\n            .sort()\n            .join(\"\"),\n        )\n        .sort();\n      return codes.every((code, i) => code === leftSorted[i]);\n    });\n\n    const nums = row[1]\n      .map((code) =>\n        code\n          .split(\"\")\n          .map((c) => match.indexOf(c))\n          .sort((a, b) => a - b)\n          .toString(),\n      )\n      .map((numArr) =>\n        positionsNumbers.findIndex((value, i) => numArr === value.toString()),\n      );\n\n    sum += Number(nums.join(\"\"));\n  }\n\n  return sum;\n};\n\nfunction permutator(inputArr: string[]) {\n  let result = [];\n\n  const permute = (arr, m = []) => {\n    if (arr.length === 0) {\n      result.push(m);\n    } else {\n      for (let i = 0; i < arr.length; i++) {\n        let curr = arr.slice();\n        let next = curr.splice(i, 1);\n        permute(curr.slice(), m.concat(next));\n      }\n    }\n  };\n\n  permute(inputArr);\n\n  return result;\n}\n\n\nconst positionsNumbers = [\n  [0, 1, 2, 4, 5, 6],\n  [2, 5],\n  [0, 2, 3, 4, 6],\n  [0, 2, 3, 5, 6],\n  [1, 2, 3, 5],\n  [0, 1, 3, 5, 6],\n  [0, 1, 3, 4, 5, 6],\n  [0, 2, 5],\n  [0, 1, 2, 3, 4, 5, 6],\n  [0, 1, 2, 3, 5, 6],\n];\n\nconst permutations = permutator([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]);\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb | fdgacbe cefdb cefbgd gcbe\nedbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec | fcgedb cgb dgebacf gc\nfgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef | cg cg fdcagb cbg\nfbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega | efabcd cedba gadfec cb\naecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga | gecf egdcabf bgf bfgea\nfgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf | gebdcfa ecba ca fadegcb\ndbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf | cefg dcbef fcge gbcadfe\nbdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd | ed bcgafe cdgba cbgef\negadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg | gbdfcae bgc cg cgb\ngcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc | fgae cfgab fg bagce`,\n        expected: 26,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `acedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab | cdfeb fcadb cdfeb cdbaf`,\n        expected: 5353,\n      },\n      {\n        input: `be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb | fdgacbe cefdb cefbgd gcbe\nedbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec | fcgedb cgb dgebacf gc\nfgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef | cg cg fdcagb cbg\nfbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega | efabcd cedba gadfec cb\naecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga | gecf egdcabf bgf bfgea\nfgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf | gebdcfa ecba ca fadegcb\ndbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf | cefg dcbef fcge gbcadfe\nbdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd | ed bcgafe cdgba cbgef\negadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg | gbdfcae bgc cg cgb\ngcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc | fgae cfgab fg bagce`,\n        expected: 61229,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "AAAA;AAGA,MAAM,aAAa,CAAC,aAClB,SACG,MAAM,MACN,IAAI,CAAC,QAAQ,IAAI,MAAM,OAAO,IAAI,CAAC,SAAQ,KAAI,MAAM;AAE1D,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AAEzB,MAAI,QAAQ;AACZ,aAAW,OAAO,OAAO;AACvB,aAAS,IAAI,GAAG,OAAO,CAAC,SAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,KAAI,SAAS;AAAA;AAErE,SAAO;AAAA;AAGT,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,QAAQ,WAAW;AAEzB,MAAI,MAAM;AACV,aAAW,OAAO,OAAO;AACvB,UAAM,aAAa,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,MAAM,IAAI,OAAO,KAAK,KAAK;AAElE,UAAM,QAAQ,aAAa,KAAK,CAAC,gBAAgB;AAC/C,YAAM,QAAQ,iBACX,IAAI,CAAC,UACJ,MACG,IAAI,CAAC,QAAQ,YAAY,MACzB,OACA,KAAK,KAET;AACH,aAAO,MAAM,MAAM,CAAC,MAAM,MAAM,SAAS,WAAW;AAAA;AAGtD,UAAM,OAAO,IAAI,GACd,IAAI,CAAC,SACJ,KACG,MAAM,IACN,IAAI,CAAC,MAAM,MAAM,QAAQ,IACzB,KAAK,CAAC,GAAG,MAAM,IAAI,GACnB,YAEJ,IAAI,CAAC,WACJ,iBAAiB,UAAU,CAAC,OAAO,MAAM,WAAW,MAAM;AAG9D,WAAO,OAAO,KAAK,KAAK;AAAA;AAG1B,SAAO;AAAA;AAGT,oBAAoB,UAAoB;AACtC,MAAI,SAAS;AAEb,QAAM,UAAU,CAAC,KAAK,IAAI,OAAO;AAC/B,QAAI,IAAI,WAAW,GAAG;AACpB,aAAO,KAAK;AAAA,WACP;AACL,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,YAAI,OAAO,IAAI;AACf,YAAI,OAAO,KAAK,OAAO,GAAG;AAC1B,gBAAQ,KAAK,SAAS,EAAE,OAAO;AAAA;AAAA;AAAA;AAKrC,UAAQ;AAER,SAAO;AAAA;AAIT,MAAM,mBAAmB;AAAA,EACvB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA,EAChB,CAAC,GAAG;AAAA,EACJ,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA,EACb,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA,EACb,CAAC,GAAG,GAAG,GAAG;AAAA,EACV,CAAC,GAAG,GAAG,GAAG,GAAG;AAAA,EACb,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA,EAChB,CAAC,GAAG,GAAG;AAAA,EACP,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA,EACnB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA;AAGlB,MAAM,eAAe,WAAW,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAE/D,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUP,UAAU;AAAA;AAAA;AAAA,IAGd,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA,QACP,UAAU;AAAA;AAAA,MAEZ;AAAA,QACE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUP,UAAU;AAAA;AAAA;AAAA,IAGd,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
