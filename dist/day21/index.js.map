{
  "version": 3,
  "sources": ["../../src/day21/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\nimport _ from \"lodash\";\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\"\\n\").map((line) => Number(line[line.length - 1]));\n\nconst part1 = (rawInput: string) => {\n  const positions = parseInput(rawInput);\n  const scores = [0, 0];\n\n  let die = 0;\n  let rolls = 0;\n\n  function roll() {\n    let sum = 0;\n    for (let i = 0; i < 3; i++) {\n      die = (die % 100) + 1;\n      rolls++;\n      sum += die;\n    }\n    return sum;\n  }\n\n  let turn = 0;\n  while (scores.every((score) => score < 1000)) {\n    const sum = roll();\n    positions[turn] = ((positions[turn] + sum - 1) % 10) + 1;\n    scores[turn] += positions[turn];\n    turn = turn === 0 ? 1 : 0;\n  }\n\n  return rolls * Math.min(...scores);\n};\n\n// All possible combinations of 3 rolls of the Dirac dice\nconst rolls = [\n  3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8,\n  9,\n];\n\nconst part2 = (rawInput: string) => {\n  const [pos1, pos2] = parseInput(rawInput);\n\n  const initialState = {\n    turn: 0,\n    players: [\n      { position: pos1, score: 0 },\n      { position: pos2, score: 0 },\n    ],\n  };\n\n  const cache = new Map<string, number[]>();\n  function recurse(\n    roll: number,\n    state: {\n      turn: number;\n      players: { position: number; score: number }[];\n    },\n  ) {\n    const player = state.players[state.turn];\n    player.position = ((player.position + roll - 1) % 10) + 1;\n    player.score += player.position;\n\n    // End case\n    if (player.score >= 21) {\n      return [state.turn ^ 1, state.turn];\n    }\n\n    state.turn = state.turn ^ 1;\n    roll = 0;\n\n    // Check cache\n    const stringState = JSON.stringify(state);\n    if (cache.has(stringState)) {\n      return cache.get(stringState);\n    }\n\n    // Recurse for all rolls and add up\n    const result = rolls.reduce(\n      (res, nextRoll) => sumResults(res, recurse(nextRoll, _.cloneDeep(state))),\n      [0, 0],\n    );\n    cache.set(stringState, result);\n    return result;\n  }\n\n  const totalWins = rolls.reduce(\n    (res, nextRoll) =>\n      sumResults(res, recurse(nextRoll, _.cloneDeep(initialState))),\n    [0, 0],\n  );\n\n  return Math.max(...totalWins);\n};\n\nfunction sumResults(array1, array2) {\n  return [array1[0] + array2[0], array1[1] + array2[1]];\n}\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `Player 1 starting position: 4\nPlayer 2 starting position: 8`,\n        expected: 739785,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `Player 1 starting position: 4\nPlayer 2 starting position: 8`,\n        expected: 444356092776315,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "AAAA;AACA;AAEA,MAAM,aAAa,CAAC,aAClB,SAAS,MAAM,MAAM,IAAI,CAAC,SAAS,OAAO,KAAK,KAAK,SAAS;AAE/D,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,YAAY,WAAW;AAC7B,QAAM,SAAS,CAAC,GAAG;AAEnB,MAAI,MAAM;AACV,MAAI,SAAQ;AAEZ,kBAAgB;AACd,QAAI,MAAM;AACV,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,YAAO,MAAM,MAAO;AACpB;AACA,aAAO;AAAA;AAET,WAAO;AAAA;AAGT,MAAI,OAAO;AACX,SAAO,OAAO,MAAM,CAAC,UAAU,QAAQ,MAAO;AAC5C,UAAM,MAAM;AACZ,cAAU,QAAU,WAAU,QAAQ,MAAM,KAAK,KAAM;AACvD,WAAO,SAAS,UAAU;AAC1B,WAAO,SAAS,IAAI,IAAI;AAAA;AAG1B,SAAO,SAAQ,KAAK,IAAI,GAAG;AAAA;AAI7B,MAAM,QAAQ;AAAA,EACZ;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAC3E;AAAA;AAGF,MAAM,QAAQ,CAAC,aAAqB;AAClC,QAAM,CAAC,MAAM,QAAQ,WAAW;AAEhC,QAAM,eAAe;AAAA,IACnB,MAAM;AAAA,IACN,SAAS;AAAA,MACP,EAAE,UAAU,MAAM,OAAO;AAAA,MACzB,EAAE,UAAU,MAAM,OAAO;AAAA;AAAA;AAI7B,QAAM,QAAQ,IAAI;AAClB,mBACE,MACA,OAIA;AACA,UAAM,SAAS,MAAM,QAAQ,MAAM;AACnC,WAAO,WAAa,QAAO,WAAW,OAAO,KAAK,KAAM;AACxD,WAAO,SAAS,OAAO;AAGvB,QAAI,OAAO,SAAS,IAAI;AACtB,aAAO,CAAC,MAAM,OAAO,GAAG,MAAM;AAAA;AAGhC,UAAM,OAAO,MAAM,OAAO;AAC1B,WAAO;AAGP,UAAM,cAAc,KAAK,UAAU;AACnC,QAAI,MAAM,IAAI,cAAc;AAC1B,aAAO,MAAM,IAAI;AAAA;AAInB,UAAM,SAAS,MAAM,OACnB,CAAC,KAAK,aAAa,WAAW,KAAK,QAAQ,UAAU,EAAE,UAAU,UACjE,CAAC,GAAG;AAEN,UAAM,IAAI,aAAa;AACvB,WAAO;AAAA;AAGT,QAAM,YAAY,MAAM,OACtB,CAAC,KAAK,aACJ,WAAW,KAAK,QAAQ,UAAU,EAAE,UAAU,iBAChD,CAAC,GAAG;AAGN,SAAO,KAAK,IAAI,GAAG;AAAA;AAGrB,oBAAoB,QAAQ,QAAQ;AAClC,SAAO,CAAC,OAAO,KAAK,OAAO,IAAI,OAAO,KAAK,OAAO;AAAA;AAGpD,IAAI;AAAA,EACF,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA,QAEP,UAAU;AAAA;AAAA;AAAA,IAGd,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,OAAO;AAAA,MACL;AAAA,QACE,OAAO;AAAA;AAAA,QAEP,UAAU;AAAA;AAAA;AAAA,IAGd,UAAU;AAAA;AAAA,EAEZ,gBAAgB;AAAA;",
  "names": []
}
