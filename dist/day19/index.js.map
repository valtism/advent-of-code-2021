{
  "version": 3,
  "sources": ["../../src/day19/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\nimport _ from \"lodash\";\n\ntype Coord = [number, number, number];\n\ntype Match = { to: Coord; from: Coord };\n\ntype Scanner = {\n  id: string;\n  beacons: BeaconDistances[];\n};\n\ntype BeaconDistances = {\n  value: Coord;\n  relativeDistances: RelativeDistance[];\n};\n\ntype RelativeDistance = {\n  value: Coord;\n  distance: Coord;\n};\n\ntype Transform = (coord: Coord) => Coord;\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\"\\n\\n\").map((scannerRaw) => {\n    const lines = scannerRaw.split(\"\\n\");\n    const id = lines[0].match(/\\d+/)[0];\n    const beacons = lines\n      .slice(1)\n      .map((line) => line.trim().split(\",\").map(Number) as Coord);\n\n    const beaconsWithRelativeDistances = beacons.map((beacon) => {\n      const relativeDistances = beacons.map((otherBeacon) => {\n        // Relative distance, absolute and sorted to make comparison easier\n        const distance = subtract(beacon, otherBeacon)\n          .map(Math.abs)\n          .sort() as Coord;\n        return { value: otherBeacon, distance };\n      });\n      return { value: beacon, relativeDistances };\n    });\n    return { id, beacons: beaconsWithRelativeDistances };\n  });\n\nconst part1 = (rawInput: string) => {\n  const scanners = parseInput(rawInput);\n  const transforms = getTransforms(scanners);\n  const allPoints = getAllPoints(scanners, transforms);\n\n  return allPoints.size;\n};\n\nfunction getTransforms(scanners: Scanner[]) {\n  const transforms = {};\n  for (const scanner1 of scanners) {\n    for (const scanner2 of scanners) {\n      if (scanner1.id === scanner2.id) continue;\n      const transform = matchScanners(scanner1, scanner2);\n      if (transform) {\n        transforms[scanner1.id] = {\n          ...transforms[scanner1.id],\n          [scanner2.id]: transform,\n        };\n      }\n    }\n  }\n  return transforms;\n}\n\nfunction matchScanners(scanner1: Scanner, scanner2: Scanner) {\n  for (const beacon1 of scanner1.beacons) {\n    for (const beacon2 of scanner2.beacons) {\n      const transform = getBeaconTransform(beacon1, beacon2);\n      if (transform) {\n        return transform;\n      }\n    }\n  }\n  return null;\n}\n\nfunction getBeaconTransform(\n  beacon1: BeaconDistances,\n  beacon2: BeaconDistances,\n) {\n  const distanceMatches = getDistanceMatches(\n    beacon1.relativeDistances,\n    beacon2.relativeDistances,\n  );\n  if (distanceMatches.length < 12) return null;\n  return getTransformFromMatches(distanceMatches);\n}\n\nfunction getDistanceMatches(\n  list1: RelativeDistance[],\n  list2: RelativeDistance[],\n): Match[] {\n  let distanceMatches: { to: Coord; from: Coord }[] = [];\n  for (const { value: value1, distance: distance1 } of list1) {\n    for (const { value: value2, distance: distance2 } of list2) {\n      if (isEqual(distance1, distance2)) {\n        distanceMatches.push({ to: value1, from: value2 });\n      }\n    }\n  }\n  return distanceMatches;\n}\n\nfunction getTransformFromMatches(distanceMatches: Match[]) {\n  for (const rotate of rotations2) {\n    const diff = subtract(\n      distanceMatches[0].to,\n      rotate(distanceMatches[0].from),\n    );\n    const fits = distanceMatches.every((match) =>\n      isEqual(match.to, add(rotate(match.from), diff)),\n    );\n    if (fits) {\n      return (coord) => add(rotate(coord), diff);\n    }\n  }\n  throw new Error(\"No rotation found\");\n}\n\nfunction getAllPoints(scanners: Scanner[], transforms) {\n  const vistied = new Set<string>();\n  const allPoints = new Set<string>();\n\n  function recurse(id: string, transform) {\n    if (vistied.has(id)) return;\n    vistied.add(id);\n    scanners[Number(id)].beacons.forEach(({ value }) => {\n      allPoints.add(transform(value).join(\",\"));\n    });\n    for (const toId in transforms[id]) {\n      const innerTransform = transforms[id][toId];\n      recurse(toId, (coord) => transform(innerTransform(coord)));\n    }\n  }\n  recurse(\"0\", (e) => e);\n  return allPoints;\n}\n\n// Coordinate functions\n\nfunction isEqual(coord1: Coord, coord2: Coord) {\n  return (\n    coord1[0] === coord2[0] &&\n    coord1[1] === coord2[1] &&\n    coord1[2] === coord2[2]\n  );\n}\n\nfunction subtract(coord: Coord, sub: Coord): Coord {\n  return [coord[0] - sub[0], coord[1] - sub[1], coord[2] - sub[2]];\n}\n\nfunction add(coord1: Coord, coord2: Coord): Coord {\n  return [coord1[0] + coord2[0], coord1[1] + coord2[1], coord1[2] + coord2[2]];\n}\n\nfunction identity(coord: Coord) {\n  return coord;\n}\n\n// This didn't work for some reason. Must have something wrong\nconst rotations: ((coord: Coord) => Coord)[] = [\n  ([x, y, z]) => [x, y, z],\n  ([x, y, z]) => [x, -y, z],\n  ([x, y, z]) => [x, -y, -z],\n  ([x, y, z]) => [x, y, -z],\n  ([x, y, z]) => [-x, y, z],\n  ([x, y, z]) => [-x, -y, z],\n  ([x, y, z]) => [-x, -y, -z],\n  ([x, y, z]) => [-x, y, -z],\n\n  ([x, y, z]) => [y, x, z],\n  ([x, y, z]) => [y, -x, z],\n  ([x, y, z]) => [y, -x, -z],\n  ([x, y, z]) => [y, x, -z],\n  ([x, y, z]) => [-y, x, z],\n  ([x, y, z]) => [-y, -x, z],\n  ([x, y, z]) => [-y, -x, -z],\n  ([x, y, z]) => [-y, x, -z],\n\n  ([x, y, z]) => [z, y, x],\n  ([x, y, z]) => [z, -y, x],\n  ([x, y, z]) => [z, -y, -x],\n  ([x, y, z]) => [z, y, -x],\n  ([x, y, z]) => [-z, y, x],\n  ([x, y, z]) => [-z, -y, x],\n  ([x, y, z]) => [-z, -y, -x],\n  ([x, y, z]) => [-z, y, -x],\n];\n\n// All rotations, including invalid ones. Seems to work\nconst rotations2: ((coord: Coord) => Coord)[] = [\n  ([x, y, z]) => [x, y, z],\n  ([x, y, z]) => [x, z, y],\n  ([x, y, z]) => [y, x, z],\n  ([x, y, z]) => [y, z, x],\n  ([x, y, z]) => [z, x, y],\n  ([x, y, z]) => [z, y, x],\n\n  ([x, y, z]) => [-x, y, z],\n  ([x, y, z]) => [-x, z, y],\n  ([x, y, z]) => [y, -x, z],\n  ([x, y, z]) => [y, z, -x],\n  ([x, y, z]) => [z, -x, y],\n  ([x, y, z]) => [z, y, -x],\n\n  ([x, y, z]) => [x, -y, z],\n  ([x, y, z]) => [x, z, -y],\n  ([x, y, z]) => [-y, x, z],\n  ([x, y, z]) => [-y, z, x],\n  ([x, y, z]) => [z, x, -y],\n  ([x, y, z]) => [z, -y, x],\n\n  ([x, y, z]) => [x, y, -z],\n  ([x, y, z]) => [x, -z, y],\n  ([x, y, z]) => [y, x, -z],\n  ([x, y, z]) => [y, -z, x],\n  ([x, y, z]) => [-z, x, y],\n  ([x, y, z]) => [-z, y, x],\n\n  ([x, y, z]) => [-x, -y, z],\n  ([x, y, z]) => [-x, z, -y],\n  ([x, y, z]) => [-y, -x, z],\n  ([x, y, z]) => [-y, z, -x],\n  ([x, y, z]) => [z, -x, -y],\n  ([x, y, z]) => [z, -y, -x],\n\n  ([x, y, z]) => [-x, y, -z],\n  ([x, y, z]) => [-x, -z, y],\n  ([x, y, z]) => [y, -x, -z],\n  ([x, y, z]) => [y, -z, -x],\n  ([x, y, z]) => [-z, -x, y],\n  ([x, y, z]) => [-z, y, -x],\n\n  ([x, y, z]) => [x, -y, -z],\n  ([x, y, z]) => [x, -z, -y],\n  ([x, y, z]) => [-y, x, -z],\n  ([x, y, z]) => [-y, -z, x],\n  ([x, y, z]) => [-z, x, -y],\n  ([x, y, z]) => [-z, -y, x],\n\n  ([x, y, z]) => [-x, -y, -z],\n  ([x, y, z]) => [-x, -z, -y],\n  ([x, y, z]) => [-y, -x, -z],\n  ([x, y, z]) => [-y, -z, -x],\n  ([x, y, z]) => [-z, -x, -y],\n  ([x, y, z]) => [-z, -y, -x],\n];\n\nconst part2 = (rawInput: string) => {\n  const scanners = parseInput(rawInput);\n\n  const transforms = getTransforms(scanners);\n  const sensors = getTransformedSensorPositions(transforms);\n  const maxDistance = getMaxDistance(sensors);\n\n  return maxDistance;\n};\n\nfunction getTransformedSensorPositions(transforms) {\n  const visited = new Set<string>();\n  const sensors: Coord[] = [];\n  function recurse(id: string, transform: Transform) {\n    if (visited.has(id)) return;\n    visited.add(id);\n    sensors.push(transform([0, 0, 0]));\n    for (const toId in transforms[id]) {\n      const innerTransform = transforms[id][toId];\n      recurse(toId, (coord) => transform(innerTransform(coord)));\n    }\n  }\n  recurse(\"0\", identity);\n  return sensors;\n}\n\nfunction getMaxDistance(sensors: Coord[]) {\n  let maxDistance = -Infinity;\n  for (const point1 of sensors) {\n    for (const point2 of sensors) {\n      if (point1 === point2) continue;\n      const manhattanDistance = getManhattanDistance(point1, point2);\n      if (manhattanDistance > maxDistance) {\n        maxDistance = manhattanDistance;\n      }\n    }\n  }\n  return maxDistance;\n}\n\nfunction getManhattanDistance(point1: Coord, point2: Coord) {\n  const [x1, y1, z1] = point1;\n  const [x2, y2, z2] = point2;\n  return Math.abs(x1 - x2) + Math.abs(y1 - y2) + Math.abs(z1 - z2);\n}\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `--- scanner 0 ---\n404,-588,-901\n528,-643,409\n-838,591,734\n390,-675,-793\n-537,-823,-458\n-485,-357,347\n-345,-311,381\n-661,-816,-575\n-876,649,763\n-618,-824,-621\n553,345,-567\n474,580,667\n-447,-329,318\n-584,868,-557\n544,-627,-890\n564,392,-477\n455,729,728\n-892,524,684\n-689,845,-530\n423,-701,434\n7,-33,-71\n630,319,-379\n443,580,662\n-789,900,-551\n459,-707,401\n\n--- scanner 1 ---\n686,422,578\n605,423,415\n515,917,-361\n-336,658,858\n95,138,22\n-476,619,847\n-340,-569,-846\n567,-361,727\n-460,603,-452\n669,-402,600\n729,430,532\n-500,-761,534\n-322,571,750\n-466,-666,-811\n-429,-592,574\n-355,545,-477\n703,-491,-529\n-328,-685,520\n413,935,-424\n-391,539,-444\n586,-435,557\n-364,-763,-893\n807,-499,-711\n755,-354,-619\n553,889,-390\n\n--- scanner 2 ---\n649,640,665\n682,-795,504\n-784,533,-524\n-644,584,-595\n-588,-843,648\n-30,6,44\n-674,560,763\n500,723,-460\n609,671,-379\n-555,-800,653\n-675,-892,-343\n697,-426,-610\n578,704,681\n493,664,-388\n-671,-858,530\n-667,343,800\n571,-461,-707\n-138,-166,112\n-889,563,-600\n646,-828,498\n640,759,510\n-630,509,768\n-681,-892,-333\n673,-379,-804\n-742,-814,-386\n577,-820,562\n\n--- scanner 3 ---\n-589,542,597\n605,-692,669\n-500,565,-823\n-660,373,557\n-458,-679,-417\n-488,449,543\n-626,468,-788\n338,-750,-386\n528,-832,-391\n562,-778,733\n-938,-730,414\n543,643,-506\n-524,371,-870\n407,773,750\n-104,29,83\n378,-903,-323\n-778,-728,485\n426,699,580\n-438,-605,-362\n-469,-447,-387\n509,732,623\n647,635,-688\n-868,-804,481\n614,-800,639\n595,780,-596\n\n--- scanner 4 ---\n727,592,562\n-293,-554,779\n441,611,-461\n-714,465,-776\n-743,427,-804\n-660,-479,-426\n832,-632,460\n927,-485,-438\n408,393,-506\n466,436,-512\n110,16,151\n-258,-428,682\n-393,719,612\n-211,-452,876\n808,-476,-593\n-575,615,604\n-485,667,467\n-680,325,-822\n-627,-443,-432\n872,-547,-609\n833,512,582\n807,604,487\n839,-516,451\n891,-625,532\n-652,-548,-490\n30,-46,-14`,\n        expected: 79,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `--- scanner 0 ---\n404,-588,-901\n528,-643,409\n-838,591,734\n390,-675,-793\n-537,-823,-458\n-485,-357,347\n-345,-311,381\n-661,-816,-575\n-876,649,763\n-618,-824,-621\n553,345,-567\n474,580,667\n-447,-329,318\n-584,868,-557\n544,-627,-890\n564,392,-477\n455,729,728\n-892,524,684\n-689,845,-530\n423,-701,434\n7,-33,-71\n630,319,-379\n443,580,662\n-789,900,-551\n459,-707,401\n\n--- scanner 1 ---\n686,422,578\n605,423,415\n515,917,-361\n-336,658,858\n95,138,22\n-476,619,847\n-340,-569,-846\n567,-361,727\n-460,603,-452\n669,-402,600\n729,430,532\n-500,-761,534\n-322,571,750\n-466,-666,-811\n-429,-592,574\n-355,545,-477\n703,-491,-529\n-328,-685,520\n413,935,-424\n-391,539,-444\n586,-435,557\n-364,-763,-893\n807,-499,-711\n755,-354,-619\n553,889,-390\n\n--- scanner 2 ---\n649,640,665\n682,-795,504\n-784,533,-524\n-644,584,-595\n-588,-843,648\n-30,6,44\n-674,560,763\n500,723,-460\n609,671,-379\n-555,-800,653\n-675,-892,-343\n697,-426,-610\n578,704,681\n493,664,-388\n-671,-858,530\n-667,343,800\n571,-461,-707\n-138,-166,112\n-889,563,-600\n646,-828,498\n640,759,510\n-630,509,768\n-681,-892,-333\n673,-379,-804\n-742,-814,-386\n577,-820,562\n\n--- scanner 3 ---\n-589,542,597\n605,-692,669\n-500,565,-823\n-660,373,557\n-458,-679,-417\n-488,449,543\n-626,468,-788\n338,-750,-386\n528,-832,-391\n562,-778,733\n-938,-730,414\n543,643,-506\n-524,371,-870\n407,773,750\n-104,29,83\n378,-903,-323\n-778,-728,485\n426,699,580\n-438,-605,-362\n-469,-447,-387\n509,732,623\n647,635,-688\n-868,-804,481\n614,-800,639\n595,780,-596\n\n--- scanner 4 ---\n727,592,562\n-293,-554,779\n441,611,-461\n-714,465,-776\n-743,427,-804\n-660,-479,-426\n832,-632,460\n927,-485,-438\n408,393,-506\n466,436,-512\n110,16,151\n-258,-428,682\n-393,719,612\n-211,-452,876\n808,-476,-593\n-575,615,604\n-485,667,467\n-680,325,-822\n-627,-443,-432\n872,-547,-609\n833,512,582\n807,604,487\n839,-516,451\n891,-625,532\n-652,-548,-490\n30,-46,-14`,\n        expected: 3621,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "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C,GAAG,CAAC;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;AAAA,EACzB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC;AAAA,EAExB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG;AAAA,EACtB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;AAAA,EACzB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC;AAAA,EAExB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG;AAAA,EACtB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;AAAA,EACzB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC;AAAA;AAI1B,MAAM,aAA0C;AAAA,EAC9C,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG;AAAA,EACtB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG;AAAA,EACtB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG;AAAA,EACtB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG;AAAA,EACtB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG;AAAA,EACtB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG;AAAA,EAEtB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,EAEvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG;AAAA,EAEvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG;AAAA,EACvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG;AAAA,EAEvB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AAAA,EAExB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC;AAAA,EAExB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG;AAAA,EACxB,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC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",
  "names": []
}
