{
  "version": 3,
  "sources": ["../../src/day11/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\nimport _ from \"lodash\";\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\"\\n\").map((line) => line.trim().split(\"\").map(Number));\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  const map = new Map();\n  for (let y = 0; y < input.length; y++) {\n    const row = input[y];\n    for (let x = 0; x < row.length; x++) {\n      const value = row[x];\n      const coords = `${x},${y}`;\n      map.set(coords, value);\n    }\n  }\n\n  let flashes = 0;\n  for (let i = 0; i < 100; i++) {\n    let incrementAround: { x: number; y: number }[] = [];\n\n    map.forEach((value, coord) => {\n      const [x, y] = coord.split(\",\").map(Number);\n      map.set(coord, value + 1);\n      if (value === 9) {\n        incrementAround.push({ x, y });\n      }\n    });\n    while (incrementAround.length > 0) {\n      const { x, y } = incrementAround.shift();\n      const neighborCoords = [\n        `${x - 1},${y - 1}`,\n        `${x - 1},${y}`,\n        `${x - 1},${y + 1}`,\n        `${x},${y - 1}`,\n        `${x},${y + 1}`,\n        `${x + 1},${y - 1}`,\n        `${x + 1},${y}`,\n        `${x + 1},${y + 1}`,\n      ].filter((c) => map.has(c));\n      neighborCoords.forEach((coord) => {\n        const [nX, nY] = coord.split(\",\").map(Number);\n        const value = map.get(coord);\n        map.set(coord, value + 1);\n        if (value === 9) {\n          incrementAround.push({ x: nX, y: nY });\n        }\n      });\n    }\n    map.forEach((value, coord) => {\n      if (value > 9) {\n        flashes++;\n        map.set(coord, 0);\n      }\n    });\n  }\n\n  return flashes;\n};\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  const map = new Map();\n  for (let y = 0; y < input.length; y++) {\n    const row = input[y];\n    for (let x = 0; x < row.length; x++) {\n      const value = row[x];\n      const coords = `${x},${y}`;\n      map.set(coords, value);\n    }\n  }\n\n  let flashes = 0;\n  for (let i = 1; i < 1000000000; i++) {\n    let incrementAround: { x: number; y: number }[] = [];\n\n    map.forEach((value, coord) => {\n      const [x, y] = coord.split(\",\").map(Number);\n      map.set(coord, value + 1);\n      if (value === 9) {\n        incrementAround.push({ x, y });\n      }\n    });\n    while (incrementAround.length > 0) {\n      const { x, y } = incrementAround.shift();\n      const neighborCoords = [\n        `${x - 1},${y - 1}`,\n        `${x - 1},${y}`,\n        `${x - 1},${y + 1}`,\n        `${x},${y - 1}`,\n        `${x},${y + 1}`,\n        `${x + 1},${y - 1}`,\n        `${x + 1},${y}`,\n        `${x + 1},${y + 1}`,\n      ].filter((c) => map.has(c));\n      neighborCoords.forEach((coord) => {\n        const [nX, nY] = coord.split(\",\").map(Number);\n        const value = map.get(coord);\n        map.set(coord, value + 1);\n        if (value === 9) {\n          incrementAround.push({ x: nX, y: nY });\n        }\n      });\n    }\n    flashes = 0;\n    map.forEach((value, coord) => {\n      if (value > 9) {\n        flashes++;\n        map.set(coord, 0);\n      }\n    });\n    if (flashes === map.size) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `5483143223\n      2745854711\n      5264556173\n      6141336146\n      6357385478\n      4167524645\n      2176841721\n      6882881134\n      4846848554\n      5283751526`,\n        expected: 1656,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `5483143223\n      2745854711\n      5264556173\n      6141336146\n      6357385478\n      4167524645\n      2176841721\n      6882881134\n      4846848554\n      5283751526`,\n        expected: 195,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "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",
  "names": []
}
