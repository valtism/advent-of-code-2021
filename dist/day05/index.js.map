{
  "version": 3,
  "sources": ["../../src/day05/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\"\\n\").map((row) => {\n    const [start, end] = row.split(\" -> \");\n    const [x1, y1] = start.split(\",\").map(Number);\n    const [x2, y2] = end.split(\",\").map(Number);\n    return {\n      start: { x: x1, y: y1 },\n      end: { x: x2, y: y2 },\n    };\n  });\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n  const horOrVert = input.filter(\n    (row) => row.start.x === row.end.x || row.start.y === row.end.y,\n  );\n\n  const lines = horOrVert.flatMap((row) => {\n    if (row.start.x === row.end.x) {\n      const yDiff = Math.abs(row.end.y - row.start.y);\n      if (row.start.y < row.end.y) {\n        return Array(yDiff + 1)\n          .fill(null)\n          .map((_, i) => {\n            return { x: row.start.x, y: row.start.y + i };\n          });\n      } else {\n        return Array(yDiff + 1)\n          .fill(null)\n          .map((_, i) => {\n            return { x: row.start.x, y: row.end.y + i };\n          });\n      }\n    } else if (row.start.y === row.end.y) {\n      const xDiff = Math.abs(row.end.x - row.start.x);\n      if (row.start.x < row.end.x) {\n        return Array(xDiff + 1)\n          .fill(null)\n          .map((_, i) => {\n            return { x: row.start.x + i, y: row.start.y };\n          });\n      } else {\n        return Array(xDiff + 1)\n          .fill(null)\n          .map((_, i) => {\n            return { x: row.end.x + i, y: row.start.y };\n          });\n      }\n    }\n  });\n\n  const map = new Map();\n\n  lines.forEach((line) => {\n    const coords = `${line.x},${line.y}`;\n    if (map.has(coords)) {\n      const value = map.get(coords);\n      map.set(coords, value + 1);\n    } else {\n      map.set(coords, 1);\n    }\n  });\n\n  let atLeastTwo = 0;\n  map.forEach((value) => {\n    if (value >= 2) {\n      atLeastTwo++;\n    }\n  });\n\n  return atLeastTwo;\n};\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  const coordinates: Record<string, number> = {};\n  input.forEach(({ start, end }) => {\n    const diff = Math.abs(end.x - start.x || end.y - start.y);\n    const xSign = end.x === start.x ? 0 : end.x > start.x ? 1 : -1;\n    const ySign = end.y === start.y ? 0 : end.y > start.y ? 1 : -1;\n\n    return Array(Math.abs(diff) + 1)\n      .fill(null)\n      .forEach((_, i) => {\n        const x = start.x + i * xSign;\n        const y = start.y + i * ySign;\n        const coords = `${x},${y}`;\n        coordinates[coords] = coordinates[coords] + 1 || 1;\n      });\n  });\n\n  return Object.values(coordinates).filter((value) => value >= 2).length;\n};\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `0,9 -> 5,9\n8,0 -> 0,8\n9,4 -> 3,4\n2,2 -> 2,1\n7,0 -> 7,4\n6,4 -> 2,0\n0,9 -> 2,9\n3,4 -> 1,4\n0,0 -> 8,8\n5,5 -> 8,2`,\n        expected: 5,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `0,9 -> 5,9\n8,0 -> 0,8\n9,4 -> 3,4\n2,2 -> 2,1\n7,0 -> 7,4\n6,4 -> 2,0\n0,9 -> 2,9\n3,4 -> 1,4\n0,0 -> 8,8\n5,5 -> 8,2`,\n        expected: 12,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "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",
  "names": []
}
