{
  "version": 3,
  "sources": ["../../src/day16/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\nimport _ from \"lodash\";\n\nconst parseInput = (rawInput: string) =>\n  rawInput.split(\"\").map(hex2bin).join(\"\");\n\nfunction hex2bin(string: string) {\n  return string\n    .split(\"\")\n    .map((i) => parseInt(i, 16).toString(2).padStart(4, \"0\"))\n    .join(\"\");\n}\n\nconst part1 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  let index = 0;\n  let versionNumbers: number[] = [];\n  function parsePacket(packet: string) {\n    const version = parseInt(packet.slice(index, (index += 3)), 2);\n    versionNumbers.push(version);\n    const typeId = parseInt(packet.slice(index, (index += 3)), 2);\n    if (typeId === 4) {\n      let last = false;\n      let literals: string[] = [];\n      while (!last) {\n        if (packet[index++] === \"0\") {\n          last = true;\n        }\n        const literal = packet.slice(index, (index += 4)).padEnd(4, \"0\");\n        literals.push(literal);\n        if (last) {\n          break;\n        }\n      }\n      return;\n    }\n\n    const lengthTypeId = packet[index++];\n    const endOfLength = lengthTypeId === \"0\" ? 15 : 11;\n    const length = parseInt(packet.slice(index, (index += endOfLength)), 2);\n    if (lengthTypeId === \"0\") {\n      const end = index + length;\n      while (index < end) {\n        parsePacket(packet);\n      }\n    } else if (lengthTypeId === \"1\") {\n      for (let i = 0; i < length; i++) {\n        parsePacket(packet);\n      }\n    }\n  }\n  parsePacket(input);\n\n  return versionNumbers.reduce((acc, curr) => acc + curr, 0);\n};\n\nconst part2 = (rawInput: string) => {\n  const input = parseInput(rawInput);\n\n  let index = 0;\n  function parsePacket(packet: string) {\n    const version = parseInt(packet.slice(index, (index += 3)), 2);\n    const typeId = parseInt(packet.slice(index, (index += 3)), 2);\n\n    // Literal value\n    if (typeId === 4) {\n      let last = false;\n      let literals: string[] = [];\n      while (!last) {\n        if (packet[index++] === \"0\") {\n          last = true;\n        }\n        const literal = packet.slice(index, (index += 4)).padEnd(4, \"0\");\n        literals.push(literal);\n        if (last) {\n          return parseInt(literals.join(\"\"), 2);\n        }\n      }\n    }\n\n    const lengthTypeId = packet[index++];\n    const endOfLength = lengthTypeId === \"0\" ? 15 : 11;\n    const length = parseInt(packet.slice(index, (index += endOfLength)), 2);\n\n    const subPacketResults: number[] = [];\n    if (lengthTypeId === \"0\") {\n      const end = index + length;\n      while (index < end) {\n        subPacketResults.push(parsePacket(packet));\n      }\n    } else if (lengthTypeId === \"1\") {\n      for (let i = 0; i < length; i++) {\n        subPacketResults.push(parsePacket(packet));\n      }\n    }\n    return subPacketResults.reduce(operations[typeId]);\n  }\n\n  return parsePacket(input);\n};\n\nconst operations: { [key: number]: (acc: number, curr: number) => number } = {\n  0: (acc, curr) => acc + curr,\n  1: (acc, curr) => acc * curr,\n  2: (acc, curr) => Math.min(acc, curr),\n  3: (acc, curr) => Math.max(acc, curr),\n  5: (acc, curr) => (acc > curr ? 1 : 0),\n  6: (acc, curr) => (acc < curr ? 1 : 0),\n  7: (acc, curr) => (acc === curr ? 1 : 0),\n};\n\nrun({\n  part1: {\n    tests: [\n      { input: `8A004A801A8002F478`, expected: 16 },\n      { input: `620080001611562C8802118E34`, expected: 12 },\n      { input: `C0015000016115A2E0802F182340`, expected: 23 },\n      { input: `A0016C880162017C3686B18A3D4780`, expected: 31 },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      { input: `C200B40A82`, expected: 3 },\n      { input: `04005AC33890`, expected: 54 },\n      { input: `880086C3E88112`, expected: 7 },\n      { input: `CE00C43D881120`, expected: 9 },\n      { input: `D8005AC2A8F0`, expected: 1 },\n      { input: `F600BC2D8F`, expected: 0 },\n      { input: `9C005AC2F8F0`, expected: 0 },\n      { input: `9C0141080250320F1802104A08`, expected: 1 },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "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",
  "names": []
}
