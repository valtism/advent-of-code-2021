{
  "version": 3,
  "sources": ["../../src/day20/index.ts"],
  "sourcesContent": ["import run from \"aocrunner\";\nimport _ from \"lodash\";\n\nconst parseInput = (rawInput: string) => {\n  const [enhancement, image] = rawInput.split(\"\\n\\n\");\n  const pixels = new Set<string>();\n  image.split(\"\\n\").forEach((line, y) => {\n    line\n      .trim()\n      .split(\"\")\n      .forEach((pixel, x) => {\n        if (pixel === \"#\") {\n          pixels.add(`${x},${y}`);\n        }\n      });\n  });\n  return { enhancement, pixels };\n};\n\nconst part1 = (rawInput: string) => {\n  const { enhancement, pixels } = parseInput(rawInput);\n\n  const flipInf = enhancement[0] === \"#\";\n  const once = enhance(pixels, enhancement, false);\n  const twice = enhance(once, enhancement, flipInf ? true : false);\n\n  return twice.size;\n};\n\nconst part2 = (rawInput: string) => {\n  let { enhancement, pixels } = parseInput(rawInput);\n\n  const doesInfinityFlip = enhancement[0] === \"#\";\n  let isInfinityOn = false;\n  for (let i = 0; i < 50; i++) {\n    pixels = enhance(pixels, enhancement, isInfinityOn);\n    if (doesInfinityFlip) {\n      isInfinityOn = !isInfinityOn;\n    }\n  }\n\n  return pixels.size;\n};\n\nfunction enhance(\n  pixels: Set<string>,\n  enhancement: string,\n  isInfinityOn: boolean,\n) {\n  const newPixels = new Set<string>();\n\n  const { minX, maxX, minY, maxY } = getBounds(pixels);\n  for (let x = minX - 1; x <= maxX + 1; x++) {\n    for (let y = minY - 1; y <= maxY + 1; y++) {\n      const neighbors = getNeighbours(x, y);\n      const surroundNumber = neighbors.map(({ x, y }) => {\n        const isBeyondBounds = x < minX || x > maxX || y < minY || y > maxY;\n        if (isBeyondBounds) {\n          return isInfinityOn ? \"1\" : \"0\";\n        }\n        return pixels.has(`${x},${y}`) ? \"1\" : \"0\";\n      });\n\n      const enhancementIndex = parseInt(surroundNumber.join(\"\"), 2);\n      const newPixel = enhancement[enhancementIndex];\n\n      if (newPixel === \"#\") {\n        newPixels.add(`${x},${y}`);\n      }\n    }\n  }\n  return newPixels;\n}\n\n// Get the max and min x and y values of the set\nfunction getBounds(set: Set<string>) {\n  const setArray = Array.from(set);\n  const xArray = setArray.map((p) => Number(p.split(\",\")[0]));\n  const yArray = setArray.map((p) => Number(p.split(\",\")[1]));\n  const minX = Math.min(...xArray);\n  const maxX = Math.max(...xArray);\n  const minY = Math.min(...yArray);\n  const maxY = Math.max(...yArray);\n  return { minX, maxX, minY, maxY };\n}\n\n// Get neighbours on all sides, including original position\nfunction getNeighbours(x, y) {\n  return [\n    { x: x - 1, y: y - 1 },\n    { x: x, y: y - 1 },\n    { x: x + 1, y: y - 1 },\n    { x: x - 1, y: y },\n    { x: x, y: y },\n    { x: x + 1, y: y },\n    { x: x - 1, y: y + 1 },\n    { x: x, y: y + 1 },\n    { x: x + 1, y: y + 1 },\n  ];\n}\n\n// Print out pixels in array, for debugging\nfunction printSet(set: Set<string>) {\n  const minX = Math.min(...Array.from(set).map((p) => Number(p.split(\",\")[0])));\n  const maxX = Math.max(...Array.from(set).map((p) => Number(p.split(\",\")[0])));\n  const minY = Math.min(...Array.from(set).map((p) => Number(p.split(\",\")[1])));\n  const maxY = Math.max(...Array.from(set).map((p) => Number(p.split(\",\")[1])));\n  const array = Array(maxY - minY + 1)\n    .fill(null)\n    .map(() => Array(maxX - minX + 1).fill(\".\"));\n  set.forEach((coord) => {\n    const [x, y] = coord.split(\",\").map(Number);\n    array[y - minY][x - minX] = \"#\";\n  });\n  set.forEach((coord) => {\n    const [x, y] = coord.split(\",\").map(Number);\n    array[y - minY][x - minX] = \"#\";\n  });\n  console.log(array.map((row) => row.join(\"\")).join(\"\\n\"));\n}\n\nrun({\n  part1: {\n    tests: [\n      {\n        input: `..#.#..#####.#.#.#.###.##.....###.##.#..###.####..#####..#....#..#..##..###..######.###...####..#..#####..##..#.#####...##.#.#..#.##..#.#......#.###.######.###.####...#.##.##..#..#..#####.....#.#....###..#.##......#.....#..#..#..##..#...##.######.####.####.#.#...#.......#..#.#.#...####.##.#......#..#...##.#.##..#...##.#.##..###.#......#.#.......#.#.#.####.###.##...#.....####.#..#..#.##.#....##..#.####....##...##..#...#......#.#.......#.......##..####..#...#.#.#...##..#.#..###..#####........#..####......#..#\n\n#..#.\n#....\n##..#\n..#..\n..###`,\n        expected: 35,\n      },\n    ],\n    solution: part1,\n  },\n  part2: {\n    tests: [\n      {\n        input: `n\n#..#.\n#....\n##..#\n..#..\n..###`,\n        expected: 3351,\n      },\n    ],\n    solution: part2,\n  },\n  trimTestInputs: true,\n});\n"],
  "mappings": "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",
  "names": []
}
